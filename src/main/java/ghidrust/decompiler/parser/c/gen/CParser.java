package ghidrust.decompiler.parser.c.gen;

/* CParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CParser.java */
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import ghidrust.decompiler.parser.c.CVisitor;

public class CParser/*@bgen(jjtree)*/implements CParserTreeConstants, CParserConstants {/*@bgen(jjtree)*/
  protected JJTCParserState jjtree = new JJTCParserState();private static CParser c_parser;

        // Run the parser
        public static String transpile(String c_code) {
                InputStream stream = new ByteArrayInputStream(c_code.getBytes(StandardCharsets.UTF_8));
                c_parser = new CParser(stream);

                try {
                        return parse();
                } catch (ParseException e) {
                        System.out.println("Rust transpiler: Encountered errors during parsing.");
                        e.printStackTrace();
                        return null;
                }
        }

        public static String parse() throws ParseException {
                CParserVisitor visitor = new CVisitor();
        return (String) c_parser.FunctionDefinition().jjtAccept(visitor, null);
        }

  final public SimpleNode FunctionDefinition() throws ParseException {/*@bgen(jjtree) FunctionDefinition */
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        DeclarationSpecifiers();
      } else {
        ;
      }
      Declarator();
      CompoundStatement();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclarationSpecifiers();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case 61:
      case 65:{
        InitDeclaratorList();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(58);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void DeclarationList() throws ParseException {/*@bgen(jjtree) DeclarationList */
  ASTDeclarationList jjtn000 = new ASTDeclarationList(JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Declaration();
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void DeclarationSpecifiers() throws ParseException {/*@bgen(jjtree) DeclarationSpecifiers */
  ASTDeclarationSpecifiers jjtn000 = new ASTDeclarationSpecifiers(JJTDECLARATIONSPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:{
        StorageClassSpecifier();
        if (jj_2_3(2147483647)) {
          DeclarationSpecifiers();
        } else {
          ;
        }
        break;
        }
      case UNDEFINED_TYPE:
      case UNSIGNED:
      case DOUBLE:
      case SIGNED:
      case FLOAT:
      case SHORT:
      case LONG:
      case VOID:
      case CHAR:
      case INT:
      case CODE:{
        TypeSpecifier();
        if (jj_2_4(2147483647)) {
          DeclarationSpecifiers();
        } else {
          ;
        }
        break;
        }
      case VOLATILE:
      case CONST:{
        TypeQualifier();
        if (jj_2_5(2147483647)) {
          DeclarationSpecifiers();
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void StorageClassSpecifier() throws ParseException {/*@bgen(jjtree) GhostStringToken */
        ASTGhostStringToken jjtn000 = new ASTGhostStringToken(JJTGHOSTSTRINGTOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AUTO:{
        t = jj_consume_token(AUTO);
        break;
        }
      case REGISTER:{
        t = jj_consume_token(REGISTER);
        break;
        }
      case STATIC:{
        t = jj_consume_token(STATIC);
        break;
        }
      case EXTERN:{
        t = jj_consume_token(EXTERN);
        break;
        }
      case TYPEDEF:{
        t = jj_consume_token(TYPEDEF);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void TypeSpecifier() throws ParseException {/*@bgen(jjtree) TypeStringToken */
        ASTTypeStringToken jjtn000 = new ASTTypeStringToken(JJTTYPESTRINGTOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        t = jj_consume_token(VOID);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        t = jj_consume_token(SHORT);
        break;
        }
      case INT:{
        t = jj_consume_token(INT);
        break;
        }
      case LONG:{
        t = jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        t = jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        t = jj_consume_token(DOUBLE);
        break;
        }
      case SIGNED:{
        t = jj_consume_token(SIGNED);
        break;
        }
      case UNSIGNED:{
        t = jj_consume_token(UNSIGNED);
        break;
        }
      case CODE:{
        t = jj_consume_token(CODE);
        break;
        }
      case UNDEFINED_TYPE:{
        t = jj_consume_token(UNDEFINED_TYPE);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void TypeQualifier() throws ParseException {/*@bgen(jjtree) StringToken */
        ASTStringToken jjtn000 = new ASTStringToken(JJTSTRINGTOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONST:{
        t = jj_consume_token(CONST);
        break;
        }
      case VOLATILE:{
        t = jj_consume_token(VOLATILE);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void InitDeclaratorList() throws ParseException {/*@bgen(jjtree) InitDeclaratorList */
  ASTInitDeclaratorList jjtn000 = new ASTInitDeclaratorList(JJTINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InitDeclarator();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(59);
        InitDeclarator();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void InitDeclarator() throws ParseException {/*@bgen(jjtree) InitDeclarator */
  ASTInitDeclarator jjtn000 = new ASTInitDeclarator(JJTINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Declarator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 60:{
        jj_consume_token(60);
        Initializer();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void SpecifierQualifierList() throws ParseException {/*@bgen(jjtree) SpecifierQualifierList */
  ASTSpecifierQualifierList jjtn000 = new ASTSpecifierQualifierList(JJTSPECIFIERQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNDEFINED_TYPE:
      case UNSIGNED:
      case DOUBLE:
      case SIGNED:
      case FLOAT:
      case SHORT:
      case LONG:
      case VOID:
      case CHAR:
      case INT:
      case CODE:{
        TypeSpecifier();
        if (jj_2_6(2147483647)) {
          SpecifierQualifierList();
        } else {
          ;
        }
        break;
        }
      case VOLATILE:
      case CONST:{
        TypeQualifier();
        if (jj_2_7(2147483647)) {
          SpecifierQualifierList();
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Declarator() throws ParseException {/*@bgen(jjtree) Declarator */
  ASTDeclarator jjtn000 = new ASTDeclarator(JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 65:{
        Pointer();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      DirectDeclarator();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void DirectDeclarator() throws ParseException {/*@bgen(jjtree) DirectDeclarator */
  ASTDirectDeclarator jjtn000 = new ASTDirectDeclarator(JJTDIRECTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        break;
        }
      case 61:{
        jj_consume_token(61);
        Declarator();
        jj_consume_token(62);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 61:
        case 63:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          jj_consume_token(63);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 61:
          case 65:
          case 85:
          case 94:
          case 95:
          case 98:
          case 99:
          case 100:
          case 101:{
            ConstantExpression();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          jj_consume_token(64);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_8(3)) {
            jj_consume_token(61);
            ParameterTypeList();
            jj_consume_token(62);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 61:{
              jj_consume_token(61);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IDENTIFIER:{
                IdentifierList();
                break;
                }
              default:
                jj_la1[12] = jj_gen;
                ;
              }
              jj_consume_token(62);
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Pointer() throws ParseException {/*@bgen(jjtree) Pointer */
  ASTPointer jjtn000 = new ASTPointer(JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOLATILE:
      case CONST:{
        TypeQualifierList();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 65:{
        Pointer();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void TypeQualifierList() throws ParseException {/*@bgen(jjtree) TypeQualifierList */
  ASTTypeQualifierList jjtn000 = new ASTTypeQualifierList(JJTTYPEQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        TypeQualifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOLATILE:
        case CONST:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ParameterTypeList() throws ParseException {/*@bgen(jjtree) ParameterTypeList */
  ASTParameterTypeList jjtn000 = new ASTParameterTypeList(JJTPARAMETERTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParameterList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        jj_consume_token(59);
        jj_consume_token(66);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ParameterList() throws ParseException {/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParameterDeclaration();
      label_5:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(59);
        ParameterDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ParameterDeclaration() throws ParseException {/*@bgen(jjtree) ParameterDeclaration */
  ASTParameterDeclaration jjtn000 = new ASTParameterDeclaration(JJTPARAMETERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclarationSpecifiers();
      if (jj_2_10(2147483647)) {
        Declarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 61:
        case 63:
        case 65:{
          AbstractDeclarator();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void IdentifierList() throws ParseException {/*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        jj_consume_token(59);
        Identifier();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Initializer() throws ParseException {/*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = new ASTInitializer(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case 61:
      case 65:
      case 85:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:{
        AssignmentExpression();
        break;
        }
      case 67:{
        jj_consume_token(67);
        InitializerList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          jj_consume_token(59);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(68);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void InitializerList() throws ParseException {/*@bgen(jjtree) InitializerList */
  ASTInitializerList jjtn000 = new ASTInitializerList(JJTINITIALIZERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Initializer();
      label_7:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(59);
        Initializer();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void TypeName() throws ParseException {/*@bgen(jjtree) TypeName */
  ASTTypeName jjtn000 = new ASTTypeName(JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpecifierQualifierList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 61:
      case 63:
      case 65:{
        AbstractDeclarator();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void AbstractDeclarator() throws ParseException {/*@bgen(jjtree) AbstractDeclarator */
  ASTAbstractDeclarator jjtn000 = new ASTAbstractDeclarator(JJTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(3)) {
        Pointer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 61:
        case 63:
        case 65:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 65:{
            Pointer();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          DirectAbstractDeclarator();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void DirectAbstractDeclarator() throws ParseException {/*@bgen(jjtree) DirectAbstractDeclarator */
  ASTDirectAbstractDeclarator jjtn000 = new ASTDirectAbstractDeclarator(JJTDIRECTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(2)) {
        jj_consume_token(61);
        AbstractDeclarator();
        jj_consume_token(62);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          jj_consume_token(63);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 61:
          case 65:
          case 85:
          case 94:
          case 95:
          case 98:
          case 99:
          case 100:
          case 101:{
            ConstantExpression();
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          jj_consume_token(64);
          break;
          }
        case 61:{
          jj_consume_token(61);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UNDEFINED_TYPE:
          case VOLATILE:
          case REGISTER:
          case UNSIGNED:
          case TYPEDEF:
          case DOUBLE:
          case EXTERN:
          case STATIC:
          case SIGNED:
          case CONST:
          case FLOAT:
          case SHORT:
          case LONG:
          case AUTO:
          case VOID:
          case CHAR:
          case INT:
          case CODE:{
            ParameterTypeList();
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          jj_consume_token(62);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 61:
        case 63:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          jj_consume_token(63);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 61:
          case 65:
          case 85:
          case 94:
          case 95:
          case 98:
          case 99:
          case 100:
          case 101:{
            ConstantExpression();
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            ;
          }
          jj_consume_token(64);
          break;
          }
        case 61:{
          jj_consume_token(61);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UNDEFINED_TYPE:
          case VOLATILE:
          case REGISTER:
          case UNSIGNED:
          case TYPEDEF:
          case DOUBLE:
          case EXTERN:
          case STATIC:
          case SIGNED:
          case CONST:
          case FLOAT:
          case SHORT:
          case LONG:
          case AUTO:
          case VOID:
          case CHAR:
          case INT:
          case CODE:{
            ParameterTypeList();
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          jj_consume_token(62);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DOUBLE:
        case SIZEOF:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case CONST:
        case FLOAT:
        case SHORT:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case INT:
        case CODE:
        case IDENTIFIER:
        case 58:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          ExpressionStatement();
          break;
          }
        case 67:{
          CompoundStatement();
          break;
          }
        case SWITCH:
        case IF:{
          SelectionStatement();
          break;
          }
        case WHILE:
        case FOR:
        case DO:{
          IterationStatement();
          break;
          }
        case CONTINUE:
        case RETURN:
        case BREAK:
        case GOTO:{
          JumpStatement();
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void LabeledStatement() throws ParseException {/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        jj_consume_token(69);
        Statement();
        break;
        }
      case CASE:{
        jj_consume_token(CASE);
        ConstantExpression();
        jj_consume_token(69);
        Statement();
        break;
        }
      case DFLT:{
        jj_consume_token(DFLT);
        jj_consume_token(69);
        Statement();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ExpressionStatement() throws ParseException {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case UNDEFINED_TYPE:
      case VOLATILE:
      case REGISTER:
      case UNSIGNED:
      case TYPEDEF:
      case DOUBLE:
      case SIZEOF:
      case EXTERN:
      case STATIC:
      case SIGNED:
      case CONST:
      case FLOAT:
      case SHORT:
      case LONG:
      case AUTO:
      case VOID:
      case CHAR:
      case INT:
      case CODE:
      case IDENTIFIER:
      case 61:
      case 65:
      case 85:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:{
        Expression();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(58);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void CompoundStatement() throws ParseException {/*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = new ASTCompoundStatement(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      if (jj_2_15(2147483647)) {
        DeclarationList();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case UNDEFINED_TYPE:
      case CONTINUE:
      case VOLATILE:
      case REGISTER:
      case UNSIGNED:
      case TYPEDEF:
      case DFLT:
      case DOUBLE:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case EXTERN:
      case STATIC:
      case SIGNED:
      case WHILE:
      case BREAK:
      case CONST:
      case FLOAT:
      case SHORT:
      case CASE:
      case LONG:
      case AUTO:
      case VOID:
      case CHAR:
      case GOTO:
      case FOR:
      case INT:
      case IF:
      case DO:
      case CODE:
      case IDENTIFIER:
      case 58:
      case 61:
      case 65:
      case 67:
      case 85:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:{
        StatementList();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(68);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void StatementList() throws ParseException {/*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case CONTINUE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DFLT:
        case DOUBLE:
        case SIZEOF:
        case SWITCH:
        case RETURN:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case WHILE:
        case BREAK:
        case CONST:
        case FLOAT:
        case SHORT:
        case CASE:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case GOTO:
        case FOR:
        case INT:
        case IF:
        case DO:
        case CODE:
        case IDENTIFIER:
        case 58:
        case 61:
        case 65:
        case 67:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void SelectionStatement() throws ParseException {/*@bgen(jjtree) SelectionStatement */
  ASTSelectionStatement jjtn000 = new ASTSelectionStatement(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(61);
        Expression();
        jj_consume_token(62);
        Statement();
        if (jj_2_16(2)) {
          jj_consume_token(ELSE);
          Statement();
        } else {
          ;
        }
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
        jj_consume_token(61);
        Expression();
        jj_consume_token(62);
        Statement();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void IterationStatement() throws ParseException {/*@bgen(jjtree) IterationStatement */
  ASTIterationStatement jjtn000 = new ASTIterationStatement(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(61);
        Expression();
        jj_consume_token(62);
        Statement();
        break;
        }
      case DO:{
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(61);
        Expression();
        jj_consume_token(62);
        jj_consume_token(58);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        jj_consume_token(61);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DOUBLE:
        case SIZEOF:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case CONST:
        case FLOAT:
        case SHORT:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case INT:
        case CODE:
        case IDENTIFIER:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          Expression();
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(58);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DOUBLE:
        case SIZEOF:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case CONST:
        case FLOAT:
        case SHORT:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case INT:
        case CODE:
        case IDENTIFIER:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          Expression();
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(58);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DOUBLE:
        case SIZEOF:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case CONST:
        case FLOAT:
        case SHORT:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case INT:
        case CODE:
        case IDENTIFIER:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          Expression();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(62);
        Statement();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void JumpStatement() throws ParseException {/*@bgen(jjtree) JumpStatement */
  ASTJumpStatement jjtn000 = new ASTJumpStatement(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GOTO:{
        jj_consume_token(GOTO);
        Identifier();
        jj_consume_token(58);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
        jj_consume_token(58);
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
        jj_consume_token(58);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case UNDEFINED_TYPE:
        case VOLATILE:
        case REGISTER:
        case UNSIGNED:
        case TYPEDEF:
        case DOUBLE:
        case SIZEOF:
        case EXTERN:
        case STATIC:
        case SIGNED:
        case CONST:
        case FLOAT:
        case SHORT:
        case LONG:
        case AUTO:
        case VOID:
        case CHAR:
        case INT:
        case CODE:
        case IDENTIFIER:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          Expression();
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        jj_consume_token(58);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case 61:
      case 65:
      case 85:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:{
        AssignmentExpression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 59:{
            ;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            break label_10;
          }
          jj_consume_token(59);
          AssignmentExpression();
        }
        break;
        }
      case UNDEFINED_TYPE:
      case VOLATILE:
      case REGISTER:
      case UNSIGNED:
      case TYPEDEF:
      case DOUBLE:
      case EXTERN:
      case STATIC:
      case SIGNED:
      case CONST:
      case FLOAT:
      case SHORT:
      case LONG:
      case AUTO:
      case VOID:
      case CHAR:
      case INT:
      case CODE:{
        DeclarationSpecifiers();
        InitDeclaratorList();
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void AssignmentExpression() throws ParseException {/*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2147483647)) {
        UnaryExpression();
        AssignmentOperator();
        AssignmentExpression();
      } else if (jj_2_18(3)) {
        ConditionalExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void AssignmentOperator() throws ParseException {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 60:{
        jj_consume_token(60);
        break;
        }
      case 70:{
        jj_consume_token(70);
        break;
        }
      case 71:{
        jj_consume_token(71);
        break;
        }
      case 72:{
        jj_consume_token(72);
        break;
        }
      case 73:{
        jj_consume_token(73);
        break;
        }
      case 74:{
        jj_consume_token(74);
        break;
        }
      case 75:{
        jj_consume_token(75);
        break;
        }
      case 76:{
        jj_consume_token(76);
        break;
        }
      case 77:{
        jj_consume_token(77);
        break;
        }
      case 78:{
        jj_consume_token(78);
        break;
        }
      case 79:{
        jj_consume_token(79);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 80:{
        jj_consume_token(80);
        Expression();
        jj_consume_token(69);
        ConditionalExpression();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ConstantExpression() throws ParseException {/*@bgen(jjtree) ConstantExpression */
  ASTConstantExpression jjtn000 = new ASTConstantExpression(JJTCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void LogicalORExpression() throws ParseException {/*@bgen(jjtree) LogicalORExpression */
  ASTLogicalORExpression jjtn000 = new ASTLogicalORExpression(JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalANDExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 81:{
        jj_consume_token(81);
        LogicalORExpression();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void LogicalANDExpression() throws ParseException {/*@bgen(jjtree) LogicalANDExpression */
  ASTLogicalANDExpression jjtn000 = new ASTLogicalANDExpression(JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 82:{
        jj_consume_token(82);
        LogicalANDExpression();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void InclusiveORExpression() throws ParseException {/*@bgen(jjtree) InclusiveORExpression */
  ASTInclusiveORExpression jjtn000 = new ASTInclusiveORExpression(JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 83:{
        jj_consume_token(83);
        InclusiveORExpression();
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ExclusiveORExpression() throws ParseException {/*@bgen(jjtree) ExclusiveORExpression */
  ASTExclusiveORExpression jjtn000 = new ASTExclusiveORExpression(JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ANDExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 84:{
        jj_consume_token(84);
        ExclusiveORExpression();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ANDExpression() throws ParseException {/*@bgen(jjtree) ANDExpression */
  ASTANDExpression jjtn000 = new ASTANDExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 85:{
        jj_consume_token(85);
        ANDExpression();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 86:
      case 87:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 86:{
          jj_consume_token(86);
          break;
          }
        case 87:{
          jj_consume_token(87);
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        EqualityExpression();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 88:
      case 89:
      case 90:
      case 91:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 88:{
          jj_consume_token(88);
          break;
          }
        case 89:{
          jj_consume_token(89);
          break;
          }
        case 90:{
          jj_consume_token(90);
          break;
          }
        case 91:{
          jj_consume_token(91);
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ShiftExpression() throws ParseException {/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 92:
      case 93:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 92:{
          jj_consume_token(92);
          break;
          }
        case 93:{
          jj_consume_token(93);
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 94:
      case 95:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 94:{
          jj_consume_token(94);
          break;
          }
        case 95:{
          jj_consume_token(95);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 65:
      case 96:
      case 97:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 65:{
          jj_consume_token(65);
          break;
          }
        case 96:{
          jj_consume_token(96);
          break;
          }
        case 97:{
          jj_consume_token(97);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2147483647)) {
        jj_consume_token(61);
        TypeName();
        jj_consume_token(62);
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 61:
        case 65:
        case 85:
        case 94:
        case 95:
        case 98:
        case 99:
        case 100:
        case 101:{
          UnaryExpression();
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(3)) {
        PostfixExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          jj_consume_token(98);
          UnaryExpression();
          break;
          }
        case 99:{
          jj_consume_token(99);
          UnaryExpression();
          break;
          }
        case 65:
        case 85:
        case 94:
        case 95:
        case 100:
        case 101:{
          UnaryOperator();
          CastExpression();
          break;
          }
        case SIZEOF:{
          jj_consume_token(SIZEOF);
          if (jj_2_20(2147483647)) {
            UnaryExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 61:{
              jj_consume_token(61);
              TypeName();
              jj_consume_token(62);
              break;
              }
            default:
              jj_la1[65] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void UnaryOperator() throws ParseException {/*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = new ASTUnaryOperator(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 85:{
        jj_consume_token(85);
        break;
        }
      case 65:{
        jj_consume_token(65);
        break;
        }
      case 94:{
        jj_consume_token(94);
        break;
        }
      case 95:{
        jj_consume_token(95);
        break;
        }
      case 100:{
        jj_consume_token(100);
        break;
        }
      case 101:{
        jj_consume_token(101);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void PostfixExpression() throws ParseException {/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 61:
        case 63:
        case 98:
        case 99:
        case 102:
        case 103:{
          ;
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          jj_consume_token(63);
          Expression();
          jj_consume_token(64);
          break;
          }
        case 61:{
          jj_consume_token(61);
          if (jj_2_22(2147483647)) {
            ArgumentExpressionList();
          } else {
            ;
          }
          jj_consume_token(62);
          break;
          }
        case 102:{
          jj_consume_token(102);
          Identifier();
          break;
          }
        case 103:{
          jj_consume_token(103);
          Identifier();
          break;
          }
        case 98:{
          jj_consume_token(98);
          break;
          }
        case 99:{
          jj_consume_token(99);
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void PrimaryExpression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        Constant();
        break;
        }
      case 61:{
        jj_consume_token(61);
        Expression();
        jj_consume_token(62);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void ArgumentExpressionList() throws ParseException {/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          break label_12;
        }
        jj_consume_token(59);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Identifier() throws ParseException {/*@bgen(jjtree) StringToken */
        ASTStringToken jjtn000 = new ASTStringToken(JJTSTRINGTOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void Constant() throws ParseException {/*@bgen(jjtree) StringToken */
        ASTStringToken jjtn000 = new ASTStringToken(JJTSTRINGTOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        t = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        t = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
        }
      case CHARACTER_LITERAL:{
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_3R_LogicalORExpression_369_9_59()
 {
    if (jj_3R_LogicalANDExpression_374_9_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LogicalORExpression_369_34_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Expression_343_34_140()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_288_9_24()) return true;
    return false;
  }

  private boolean jj_3R_ConstantExpression_364_9_84()
 {
    if (jj_3R_ConditionalExpression_359_9_27()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_359_9_27()
 {
    if (jj_3R_LogicalORExpression_369_9_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionalExpression_359_33_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    if (jj_3R_AssignmentOperator_354_9_26()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_354_9_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_ConditionalExpression_359_9_27()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpression_348_9_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentExpression_348_9_103()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_AssignmentExpression_348_9_103()
 {
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    if (jj_3R_AssignmentOperator_354_9_26()) return true;
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    return false;
  }

  private boolean jj_3R_Expression_343_9_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Expression_343_9_125()) {
    jj_scanpos = xsp;
    if (jj_3R_Expression_343_66_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_Expression_343_9_125()
 {
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Expression_343_34_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_JumpStatement_338_9_122()
 {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_JumpStatement_335_11_119()
 {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  private boolean jj_3R_JumpStatement_337_9_121()
 {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_JumpStatement_336_9_120()
 {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_JumpStatement_335_9_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JumpStatement_335_11_119()) {
    jj_scanpos = xsp;
    if (jj_3R_JumpStatement_336_9_120()) {
    jj_scanpos = xsp;
    if (jj_3R_JumpStatement_337_9_121()) {
    jj_scanpos = xsp;
    if (jj_3R_JumpStatement_338_9_122()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_IterationStatement_328_11_116()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_330_9_118()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_329_9_117()
 {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_328_9_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IterationStatement_328_11_116()) {
    jj_scanpos = xsp;
    if (jj_3R_IterationStatement_329_9_117()) {
    jj_scanpos = xsp;
    if (jj_3R_IterationStatement_330_9_118()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_283_52_152()
 {
    if (jj_3R_ParameterTypeList_236_9_16()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_DeclarationList_146_9_23()) return true;
    return false;
  }

  private boolean jj_3R_SelectionStatement_322_11_114()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_SelectionStatement_323_9_115()
 {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_SelectionStatement_322_9_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectionStatement_322_11_114()) {
    jj_scanpos = xsp;
    if (jj_3R_SelectionStatement_323_9_115()) return true;
    }
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_283_46_147()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectAbstractDeclarator_283_52_152()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_ParameterDeclaration_246_76_130()
 {
    if (jj_3R_AbstractDeclarator_273_9_21()) return true;
    return false;
  }

  private boolean jj_3R_ParameterDeclaration_246_74_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ParameterDeclaration_246_76_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CompoundStatement_310_9_86()
 {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionStatement_305_11_113()
 {
    if (jj_3R_Expression_343_9_95()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionStatement_305_9_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStatement_305_11_113()) jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_LabeledStatement_300_9_48()
 {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_LabeledStatement_298_11_46()
 {
    if (jj_3R_Identifier_464_9_83()) return true;
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_LabeledStatement_299_9_47()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_ConstantExpression_364_9_84()) return true;
    return false;
  }

  private boolean jj_3R_LabeledStatement_298_9_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LabeledStatement_298_11_46()) {
    jj_scanpos = xsp;
    if (jj_3R_LabeledStatement_299_9_47()) {
    jj_scanpos = xsp;
    if (jj_3R_LabeledStatement_300_9_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_TypeName_267_36_61()
 {
    if (jj_3R_AbstractDeclarator_273_9_21()) return true;
    return false;
  }

  private boolean jj_3R_Statement_293_9_54()
 {
    if (jj_3R_JumpStatement_335_9_89()) return true;
    return false;
  }

  private boolean jj_3R_Statement_292_9_53()
 {
    if (jj_3R_IterationStatement_328_9_88()) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_283_17_151()
 {
    if (jj_3R_ConstantExpression_364_9_84()) return true;
    return false;
  }

  private boolean jj_3R_Statement_291_9_52()
 {
    if (jj_3R_SelectionStatement_322_9_87()) return true;
    return false;
  }

  private boolean jj_3R_Statement_290_9_51()
 {
    if (jj_3R_CompoundStatement_310_9_86()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_LabeledStatement_298_9_22()) return true;
    return false;
  }

  private boolean jj_3R_Statement_289_9_50()
 {
    if (jj_3R_ExpressionStatement_305_9_85()) return true;
    return false;
  }

  private boolean jj_3R_Statement_288_9_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_289_9_50()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_290_9_51()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_291_9_52()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_292_9_53()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_293_9_54()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_281_14_145()
 {
    if (jj_3R_ParameterTypeList_236_9_16()) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_283_11_146()
 {
    if (jj_scan_token(63)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectAbstractDeclarator_283_17_151()) jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_280_14_144()
 {
    if (jj_3R_ConstantExpression_364_9_84()) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_283_11_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectAbstractDeclarator_283_11_146()) {
    jj_scanpos = xsp;
    if (jj_3R_DirectAbstractDeclarator_283_46_147()) return true;
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_Declarator_213_9_18()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_AbstractDeclarator_273_9_21()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_281_9_112()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectAbstractDeclarator_281_14_145()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_280_9_111()
 {
    if (jj_scan_token(63)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectAbstractDeclarator_280_14_144()) jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_DirectAbstractDeclarator_279_9_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_DirectAbstractDeclarator_280_9_111()) {
    jj_scanpos = xsp;
    if (jj_3R_DirectAbstractDeclarator_281_9_112()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_DirectAbstractDeclarator_283_11_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_Initializer_256_9_19()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_Pointer_226_9_20()) return true;
    return false;
  }

  private boolean jj_3R_AbstractDeclarator_274_10_81()
 {
    if (jj_3R_Pointer_226_9_20()) return true;
    return false;
  }

  private boolean jj_3R_AbstractDeclarator_274_9_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AbstractDeclarator_274_10_81()) jj_scanpos = xsp;
    if (jj_3R_DirectAbstractDeclarator_279_9_82()) return true;
    return false;
  }

  private boolean jj_3R_AbstractDeclarator_273_9_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_AbstractDeclarator_274_9_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_ParameterDeclaration_246_35_106()
 {
    if (jj_3R_Declarator_213_9_18()) return true;
    return false;
  }

  private boolean jj_3R_TypeName_267_9_28()
 {
    if (jj_3R_SpecifierQualifierList_205_9_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeName_267_36_61()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_IdentifierList_251_23_141()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_Identifier_464_9_83()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_ParameterDeclaration_246_9_17()) return true;
    return false;
  }

  private boolean jj_3R_InitializerList_262_9_148()
 {
    if (jj_3R_Initializer_256_9_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Initializer_256_11_41()
 {
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    return false;
  }

  private boolean jj_3R_Initializer_257_9_42()
 {
    if (jj_scan_token(67)) return true;
    if (jj_3R_InitializerList_262_9_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_Pointer_226_39_44()
 {
    if (jj_3R_Pointer_226_9_20()) return true;
    return false;
  }

  private boolean jj_3R_Initializer_256_9_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Initializer_256_11_41()) {
    jj_scanpos = xsp;
    if (jj_3R_Initializer_257_9_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_ParameterTypeList_236_26_135()
 {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_IdentifierList_251_9_136()
 {
    if (jj_3R_Identifier_464_9_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_IdentifierList_251_23_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ParameterDeclaration_246_9_17()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ParameterDeclaration_246_35_106()) {
    jj_scanpos = xsp;
    if (jj_3R_ParameterDeclaration_246_74_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_ParameterList_241_9_38()
 {
    if (jj_3R_ParameterDeclaration_246_9_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ParameterTypeList_236_9_16()
 {
    if (jj_3R_ParameterList_241_9_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ParameterTypeList_236_26_135()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_SpecifierQualifierList_205_9_15()) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_218_26_78()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_Declarator_213_9_18()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_SpecifierQualifierList_205_9_15()) return true;
    return false;
  }

  private boolean jj_3R_Pointer_226_15_43()
 {
    if (jj_3R_TypeQualifierList_231_9_80()) return true;
    return false;
  }

  private boolean jj_3R_TypeQualifierList_231_10_110()
 {
    if (jj_3R_TypeQualifier_187_9_72()) return true;
    return false;
  }

  private boolean jj_3R_TypeQualifierList_231_9_80()
 {
    Token xsp;
    if (jj_3R_TypeQualifierList_231_10_110()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeQualifierList_231_10_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_DirectDeclarator_219_17_131()
 {
    if (jj_3R_ConstantExpression_364_9_84()) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_221_15_132()
 {
    if (jj_3R_IdentifierList_251_9_136()) return true;
    return false;
  }

  private boolean jj_3R_Pointer_226_9_20()
 {
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Pointer_226_15_43()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_Pointer_226_39_44()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SpecifierQualifierList_207_27_76()
 {
    if (jj_3R_SpecifierQualifierList_205_9_15()) return true;
    return false;
  }

  private boolean jj_3R_SpecifierQualifierList_205_27_75()
 {
    if (jj_3R_SpecifierQualifierList_205_9_15()) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_219_11_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectDeclarator_219_11_108()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_DirectDeclarator_221_9_109()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_DirectDeclarator_219_11_108()
 {
    if (jj_scan_token(63)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectDeclarator_219_17_131()) jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_221_9_109()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectDeclarator_221_15_132()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_ParameterTypeList_236_9_16()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_218_11_77()
 {
    if (jj_3R_Identifier_464_9_83()) return true;
    return false;
  }

  private boolean jj_3R_DirectDeclarator_218_9_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DirectDeclarator_218_11_77()) {
    jj_scanpos = xsp;
    if (jj_3R_DirectDeclarator_218_26_78()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_DirectDeclarator_219_11_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Declarator_213_11_39()
 {
    if (jj_3R_Pointer_226_9_20()) return true;
    return false;
  }

  private boolean jj_3R_InitDeclarator_200_24_129()
 {
    if (jj_scan_token(60)) return true;
    if (jj_3R_Initializer_256_9_19()) return true;
    return false;
  }

  private boolean jj_3R_Declarator_213_9_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Declarator_213_11_39()) jj_scanpos = xsp;
    if (jj_3R_DirectDeclarator_218_9_40()) return true;
    return false;
  }

  private boolean jj_3R_InitDeclaratorList_195_27_105()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_InitDeclarator_200_9_104()) return true;
    return false;
  }

  private boolean jj_3R_SpecifierQualifierList_207_9_37()
 {
    if (jj_3R_TypeQualifier_187_9_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SpecifierQualifierList_207_27_76()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SpecifierQualifierList_205_9_36()
 {
    if (jj_3R_TypeSpecifier_175_9_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SpecifierQualifierList_205_27_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SpecifierQualifierList_205_9_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SpecifierQualifierList_205_9_36()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecifierQualifierList_207_9_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_InitDeclarator_200_9_104()
 {
    if (jj_3R_Declarator_213_9_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InitDeclarator_200_24_129()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InitDeclaratorList_195_9_74()
 {
    if (jj_3R_InitDeclarator_200_9_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InitDeclaratorList_195_27_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_TypeQualifier_187_9_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_151_35_69()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_TypeSpecifier_175_9_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_155_27_73()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_153_28_71()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_Declaration_141_35_35()
 {
    if (jj_3R_InitDeclaratorList_195_9_74()) return true;
    return false;
  }

  private boolean jj_3R_StorageClassSpecifier_164_9_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_Declaration_141_9_14()) return true;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_155_9_34()
 {
    if (jj_3R_TypeQualifier_187_9_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeclarationSpecifiers_155_27_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_153_9_33()
 {
    if (jj_3R_TypeSpecifier_175_9_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeclarationSpecifiers_153_28_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_151_9_32()
 {
    if (jj_3R_StorageClassSpecifier_164_9_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeclarationSpecifiers_151_35_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeclarationSpecifiers_151_9_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeclarationSpecifiers_151_9_32()) {
    jj_scanpos = xsp;
    if (jj_3R_DeclarationSpecifiers_153_9_33()) {
    jj_scanpos = xsp;
    if (jj_3R_DeclarationSpecifiers_155_9_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_DeclarationList_146_11_49()
 {
    if (jj_3R_Declaration_141_9_14()) return true;
    return false;
  }

  private boolean jj_3R_DeclarationList_146_9_23()
 {
    Token xsp;
    if (jj_3R_DeclarationList_146_11_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_DeclarationList_146_11_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    return false;
  }

  private boolean jj_3R_Declaration_141_9_14()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Declaration_141_35_35()) jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_429_70_92()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_TypeName_267_9_28()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_ArgumentExpressionList_456_34_67()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    return false;
  }

  private boolean jj_3R_Constant_475_9_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Identifier_464_9_83()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_439_31_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_439_31_99()) {
    jj_scanpos = xsp;
    if (jj_3R_PostfixExpression_440_9_100()) {
    jj_scanpos = xsp;
    if (jj_3R_PostfixExpression_441_9_101()) {
    jj_scanpos = xsp;
    if (jj_3R_PostfixExpression_442_9_102()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PostfixExpression_439_31_99()
 {
    if (jj_scan_token(63)) return true;
    if (jj_3R_Expression_343_9_95()) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_ArgumentExpressionList_456_9_31()
 {
    if (jj_3R_AssignmentExpression_348_9_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArgumentExpressionList_456_34_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_ArgumentExpressionList_456_9_31()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_449_11_96()
 {
    if (jj_3R_Identifier_464_9_83()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_451_9_98()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_Expression_343_9_95()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_450_9_97()
 {
    if (jj_3R_Constant_475_9_127()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_449_9_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryExpression_449_11_96()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_450_9_97()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_451_9_98()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_PostfixExpression_440_15_128()
 {
    if (jj_3R_ArgumentExpressionList_456_9_31()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_442_9_102()
 {
    if (jj_scan_token(103)) return true;
    if (jj_3R_Identifier_464_9_83()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_441_9_101()
 {
    if (jj_scan_token(102)) return true;
    if (jj_3R_Identifier_464_9_83()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_429_20_91()
 {
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_440_9_100()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_440_15_128()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_439_9_30()
 {
    if (jj_3R_PrimaryExpression_449_9_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PostfixExpression_439_31_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AdditiveExpression_409_38_158()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    if (jj_3R_AdditiveExpression_409_9_155()) return true;
    return false;
  }

  private boolean jj_3R_UnaryOperator_434_9_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_414_28_159()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    if (jj_3R_MultiplicativeExpression_414_9_157()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_TypeName_267_9_28()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_CastExpression_419_9_29()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_429_9_58()
 {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_429_20_91()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_429_70_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_UnaryExpression_428_9_57()
 {
    if (jj_3R_UnaryOperator_434_9_90()) return true;
    if (jj_3R_CastExpression_419_9_29()) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_404_32_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_ShiftExpression_404_9_153()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_427_9_56()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_PostfixExpression_439_9_30()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_426_9_55()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_425_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_426_9_55()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_427_9_56()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_428_9_57()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_429_9_58()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CastExpression_419_11_62()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_TypeName_267_9_28()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_CastExpression_419_9_29()) return true;
    return false;
  }

  private boolean jj_3R_CastExpression_420_9_63()
 {
    if (jj_3R_UnaryExpression_425_9_25()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_399_29_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    }
    if (jj_3R_RelationalExpression_399_9_149()) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_394_34_150()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    if (jj_3R_EqualityExpression_394_9_142()) return true;
    return false;
  }

  private boolean jj_3R_CastExpression_419_9_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastExpression_419_11_62()) {
    jj_scanpos = xsp;
    if (jj_3R_CastExpression_420_9_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_414_9_157()
 {
    if (jj_3R_CastExpression_419_9_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MultiplicativeExpression_414_28_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ANDExpression_389_32_143()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_ANDExpression_389_9_137()) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_409_9_155()
 {
    if (jj_3R_MultiplicativeExpression_414_9_157()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AdditiveExpression_409_38_158()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InclusiveORExpression_379_35_134()
 {
    if (jj_scan_token(83)) return true;
    if (jj_3R_InclusiveORExpression_379_9_123()) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_404_9_153()
 {
    if (jj_3R_AdditiveExpression_409_9_155()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ShiftExpression_404_32_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExclusiveORExpression_384_27_138()
 {
    if (jj_scan_token(84)) return true;
    if (jj_3R_ExclusiveORExpression_384_9_133()) return true;
    return false;
  }

  private boolean jj_3R_LogicalANDExpression_374_35_124()
 {
    if (jj_scan_token(82)) return true;
    if (jj_3R_LogicalANDExpression_374_9_93()) return true;
    return false;
  }

  private boolean jj_3R_Expression_343_66_126()
 {
    if (jj_3R_DeclarationSpecifiers_151_9_13()) return true;
    if (jj_3R_InitDeclaratorList_195_9_74()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_399_9_149()
 {
    if (jj_3R_ShiftExpression_404_9_153()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RelationalExpression_399_29_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_EqualityExpression_394_9_142()
 {
    if (jj_3R_RelationalExpression_399_9_149()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EqualityExpression_394_34_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LogicalORExpression_369_34_94()
 {
    if (jj_scan_token(81)) return true;
    if (jj_3R_LogicalORExpression_369_9_59()) return true;
    return false;
  }

  private boolean jj_3R_ANDExpression_389_9_137()
 {
    if (jj_3R_EqualityExpression_394_9_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ANDExpression_389_32_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExclusiveORExpression_384_9_133()
 {
    if (jj_3R_ANDExpression_389_9_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExclusiveORExpression_384_27_138()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_359_33_60()
 {
    if (jj_scan_token(80)) return true;
    if (jj_3R_Expression_343_9_95()) return true;
    if (jj_scan_token(69)) return true;
    if (jj_3R_ConditionalExpression_359_9_27()) return true;
    return false;
  }

  private boolean jj_3R_InclusiveORExpression_379_9_123()
 {
    if (jj_3R_ExclusiveORExpression_384_9_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InclusiveORExpression_379_35_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LogicalANDExpression_374_9_93()
 {
    if (jj_3R_InclusiveORExpression_379_9_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LogicalANDExpression_374_35_124()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public CParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[73];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x8bd00000,0x82800000,0x9100000,0x400000,0x0,0x0,0x9500000,0x0,0x0,0x0,0x100d1000,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x100d1000,0x0,0x0,0x0,0x100d1000,0x8bd00000,0x0,0x0,0x100d1000,0x8bd00000,0x0,0xfbfd1000,0x4000000,0x9bdd1000,0xfffd1000,0xfffd1000,0x20000000,0x9bdd1000,0x9bdd1000,0x9bdd1000,0x0,0x9bdd1000,0x40200000,0x0,0x9bdd1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100d1000,0x0,0x10000000,0x0,0x0,0x0,0xd1000,0x0,0xd1000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x20400000,0x24e9c6,0x2002,0x24c984,0x40,0x8000000,0x10000000,0x24c9c4,0x0,0x20400000,0xa0000000,0x20400000,0x400000,0x80000000,0x20000000,0x40,0x0,0x40,0x8000000,0xa0000000,0x8000000,0x8000000,0x20400000,0xa0000000,0x0,0xa0000000,0x20400000,0x24e9c6,0xa0000000,0xa0000000,0x20400000,0x24e9c6,0xa0000000,0x247fe9de,0x400400,0x2064e9c6,0x247fedde,0x247fedde,0x80000,0x2064e9c6,0x2064e9c6,0x2064e9c6,0x120008,0x2064e9c6,0x10010,0x8000000,0x2064e9c6,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20400000,0x20000000,0x0,0x0,0xa0000000,0xa0000000,0x20400000,0x8000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0xc0200002,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0xc020000a,0x2,0x2,0x2,0xc0200002,0x0,0x0,0x0,0xc0200002,0x0,0x0,0xc020000a,0x0,0xc0200002,0xc020000a,0xc020000a,0x0,0xc0200002,0xc0200002,0xc0200002,0x0,0xc0200002,0x0,0x0,0xc0200002,0xffc0,0x10000,0x20000,0x40000,0x80000,0x100000,0x200000,0xc00000,0xc00000,0xf000000,0xf000000,0x30000000,0x30000000,0xc0000000,0xc0000000,0x2,0x2,0xc0200002,0x0,0xc0200002,0xc0200002,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x3c,0x0,0x0,0x3c,0x0,0x3c,0x3c,0x3c,0x0,0x3c,0x3c,0x3c,0x0,0x3c,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3c,0x0,0x3c,0x30,0xcc,0xcc,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 73; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[104];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 73; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 104; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 22; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
